generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  email        String         @unique
  phone        String?
  address      Address[]
  hireDate     DateTime       @default(now())
  passwordHash String
  isAdmin      Boolean        @default(false)
  company      Company        @relation(fields: [companyId], references: [name])
  companyId    String
  department   Department     @relation(fields: [departmentId], references: [name])
  departmentId String
  role         Role           @relation(fields: [roleId], references: [name])
  roleId       String
  salary       Salary[]
  project      Project?       @relation(fields: [projectId], references: [name])
  projectId    String?
  Todo         Todo[]
  LeaveRequest LeaveRequest[]
  Attendance   Attendance[]
  benefit      Benefit?       @relation(fields: [benefitId], references: [id])
  benefitId    String?        @db.ObjectId
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  street     String
  city       String
  state      String
  zip        String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Company {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  employees Employee[]
}

model Department {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  employees Employee[]
}

model Role {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  employees Employee[]
}

model Salary {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  priority    PriorityTypes
  state       ProjectStates
  employees   Employee[]
  todos       Todo[]
  start_date  DateTime
  end_date    DateTime
}

model Todo {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  assigned_to  Employee      @relation(fields: [assignedToId], references: [id])
  assignedToId String        @db.ObjectId
  description  String
  priority     PriorityTypes
  state        TodoStates
  start_date   DateTime
  end_date     DateTime
  Project      Project?      @relation(fields: [projectId], references: [id])
  projectId    String?       @db.ObjectId
}

model Attendance {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee         @relation(fields: [employeeId], references: [id])
  employeeId String           @db.ObjectId
  date       DateTime
  status     AttendanceStatus
}

model LeaveRequest {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  start_date DateTime
  end_date   DateTime
  status     LeaveRequestStatus
  employee   Employee           @relation(fields: [employeeId], references: [id])
  employeeId String             @db.ObjectId
}

model Benefit {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        BenefitTypes
  description String
  coverage    Int // percentage eg. 80% coverage of dental costs
  employees   Employee[]
}

enum PriorityTypes {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStates {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum TodoStates {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BenefitTypes {
  HEALTH
  DENTAL
  VISION
  LIFE
  DISABILITY
  OTHER
}
